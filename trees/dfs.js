/* Обход в глубину (Depth-first search)
Один из методов обхода дерева (графа в общем случае). Стратегия этого поиска состоит в том,
чтобы идти вглубь одного поддерева настолько, насколько это возможно.
Этот алгоритм естественным образом ложится на рекурсивное решение и получается сам собой.

Извлекаем из дерева (или поддерева) значение и детей;
Печатаем значение;
Если нет детей, то выходим. Если есть — вызываем рекурсивно функцию dfs для каждого ребёнка.*/

const dfs = (tree) => {
  // Получаем из текущего узла его содержимое и список детей
  const [name, children] = tree;
  // Распечатываем содержимое узла
  console.log(name);
  // Если список детей пустой, прерываем работу
  if (!children) {
    return;
  }
  // Применяем функию dfs ко всем дочерним элементам
  children.map(dfs);
};

// Примеры
const tree = ['A', [
  ['B', [['E'], ['F']]],
  ['C'],
  ['D', [['G'], ['J']]],
]];

dfs(tree);

// => A
// => B
// => E
// => F
// => C
// => D
// => G
// => J
